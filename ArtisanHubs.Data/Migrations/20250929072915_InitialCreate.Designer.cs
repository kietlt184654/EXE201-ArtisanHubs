// <auto-generated />
using System;
using ArtisanHubs.Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ArtisanHubs.Data.Migrations
{
    [DbContext(typeof(ArtisanHubsDbContext))]
    [Migration("20250929072915_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountId"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("avatar");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("gender");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'active'::character varying");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.HasKey("AccountId")
                        .HasName("account_pkey");

                    b.HasIndex(new[] { "Email" }, "account_email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "account_username_key")
                        .IsUnique();

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Artistprofile", b =>
                {
                    b.Property<int>("ArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("artist_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ArtistId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<string>("ArtistName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("artist_name");

                    b.Property<decimal?>("AvgRating")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("avg_rating")
                        .HasDefaultValueSql("0.00");

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("location");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("profile_image");

                    b.Property<string>("ShopName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("shop_name");

                    b.Property<string>("SocialLinks")
                        .HasColumnType("text")
                        .HasColumnName("social_links");

                    b.Property<string>("VerifiedStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("verified_status")
                        .HasDefaultValueSql("'unverified'::character varying");

                    b.HasKey("ArtistId")
                        .HasName("artistprofile_pkey");

                    b.HasIndex(new[] { "AccountId" }, "artistprofile_account_id_idx");

                    b.HasIndex(new[] { "AccountId" }, "artistprofile_account_id_key")
                        .IsUnique();

                    b.ToTable("artistprofile", (string)null);
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Artistwallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("wallet_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WalletId"));

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer")
                        .HasColumnName("artist_id");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("balance")
                        .HasDefaultValueSql("0.00");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("PendingBalance")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("pending_balance")
                        .HasDefaultValueSql("0.00");

                    b.HasKey("WalletId")
                        .HasName("artistwallet_pkey");

                    b.HasIndex(new[] { "ArtistId" }, "artistwallet_artist_id_idx");

                    b.HasIndex(new[] { "ArtistId" }, "artistwallet_artist_id_key")
                        .IsUnique();

                    b.ToTable("artistwallet", (string)null);
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Artistworkshop", b =>
                {
                    b.Property<int>("WorkshopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("workshop_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkshopId"));

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer")
                        .HasColumnName("artist_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<int>("PackageId")
                        .HasColumnType("integer")
                        .HasColumnName("package_id");

                    b.Property<decimal?>("Revenue")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("revenue")
                        .HasDefaultValueSql("0.00");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'scheduled'::character varying");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("topic");

                    b.Property<int?>("ViewerCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("viewer_count");

                    b.HasKey("WorkshopId")
                        .HasName("artistworkshop_pkey");

                    b.HasIndex(new[] { "ArtistId" }, "artistworkshop_artist_id_idx");

                    b.HasIndex(new[] { "PackageId" }, "artistworkshop_package_id_idx");

                    b.ToTable("artistworkshop", (string)null);
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'active'::character varying");

                    b.HasKey("CategoryId")
                        .HasName("category_pkey");

                    b.HasIndex("ParentId");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Commission", b =>
                {
                    b.Property<int>("CommissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("commission_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommissionId"));

                    b.Property<decimal>("AdminShare")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("admin_share");

                    b.Property<decimal>("Amount")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("amount");

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer")
                        .HasColumnName("artist_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<decimal>("Rate")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("rate");

                    b.Property<int?>("WorkshopId")
                        .HasColumnType("integer")
                        .HasColumnName("workshop_id");

                    b.HasKey("CommissionId")
                        .HasName("commission_pkey");

                    b.HasIndex("ProductId");

                    b.HasIndex("WorkshopId");

                    b.HasIndex(new[] { "ArtistId" }, "commission_artist_id_idx");

                    b.HasIndex(new[] { "OrderId" }, "commission_order_id_idx");

                    b.ToTable("commission", (string)null);
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("feedback_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FeedbackId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<int?>("WorkshopId")
                        .HasColumnType("integer")
                        .HasColumnName("workshop_id");

                    b.HasKey("FeedbackId")
                        .HasName("feedback_pkey");

                    b.HasIndex(new[] { "AccountId" }, "feedback_account_id_idx");

                    b.HasIndex(new[] { "ProductId" }, "feedback_product_id_idx");

                    b.HasIndex(new[] { "WorkshopId" }, "feedback_workshop_id_idx");

                    b.ToTable("feedback", (string)null);
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("payment_method");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("text")
                        .HasColumnName("shipping_address");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'pending'::character varying");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("total_amount");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("OrderId")
                        .HasName("Order_pkey");

                    b.HasIndex(new[] { "AccountId" }, "Order_account_id_idx");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Orderdetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("order_detail_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("total_price");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("unit_price");

                    b.HasKey("OrderDetailId")
                        .HasName("orderdetail_pkey");

                    b.HasIndex(new[] { "OrderId" }, "orderdetail_order_id_idx");

                    b.HasIndex(new[] { "ProductId" }, "orderdetail_product_id_idx");

                    b.ToTable("orderdetail", (string)null);
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("payment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("amount");

                    b.Property<string>("Method")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("method");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<DateTime?>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("payment_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'completed'::character varying");

                    b.Property<int?>("WorkshopId")
                        .HasColumnType("integer")
                        .HasColumnName("workshop_id");

                    b.HasKey("PaymentId")
                        .HasName("payment_pkey");

                    b.HasIndex(new[] { "OrderId" }, "payment_order_id_idx");

                    b.HasIndex(new[] { "WorkshopId" }, "payment_workshop_id_idx");

                    b.ToTable("payment", (string)null);
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductId"));

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer")
                        .HasColumnName("artist_id");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal?>("DiscountPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("discount_price");

                    b.Property<string>("Images")
                        .HasColumnType("text")
                        .HasColumnName("images");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'available'::character varying");

                    b.Property<int>("StockQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("stock_quantity");

                    b.Property<string>("Story")
                        .HasColumnType("text")
                        .HasColumnName("story");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("ProductId")
                        .HasName("product_pkey");

                    b.HasIndex(new[] { "ArtistId" }, "product_artist_id_idx");

                    b.HasIndex(new[] { "CategoryId" }, "product_category_id_idx");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Wallettransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("transaction_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("amount");

                    b.Property<int?>("CommissionId")
                        .HasColumnType("integer")
                        .HasColumnName("commission_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("integer")
                        .HasColumnName("payment_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'completed'::character varying");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("transaction_type");

                    b.Property<int>("WalletId")
                        .HasColumnType("integer")
                        .HasColumnName("wallet_id");

                    b.Property<int?>("WithdrawId")
                        .HasColumnType("integer")
                        .HasColumnName("withdraw_id");

                    b.HasKey("TransactionId")
                        .HasName("wallettransaction_pkey");

                    b.HasIndex("CommissionId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("WithdrawId");

                    b.HasIndex(new[] { "WalletId" }, "wallettransaction_wallet_id_idx");

                    b.ToTable("wallettransaction", (string)null);
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Withdrawrequest", b =>
                {
                    b.Property<int>("WithdrawId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("withdraw_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WithdrawId"));

                    b.Property<string>("AccountHolder")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("account_holder");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("account_number");

                    b.Property<decimal>("Amount")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("approved_at");

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer")
                        .HasColumnName("artist_id");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("bank_name");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("paid_at");

                    b.Property<DateTime?>("RequestedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("requested_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'pending'::character varying");

                    b.HasKey("WithdrawId")
                        .HasName("withdrawrequest_pkey");

                    b.HasIndex(new[] { "ArtistId" }, "withdrawrequest_artist_id_idx");

                    b.ToTable("withdrawrequest", (string)null);
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Workshoppackage", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("package_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PackageId"));

                    b.Property<decimal?>("CommissionRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("commission_rate");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<int?>("MaxViewers")
                        .HasColumnType("integer")
                        .HasColumnName("max_viewers");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'active'::character varying");

                    b.HasKey("PackageId")
                        .HasName("workshoppackage_pkey");

                    b.ToTable("workshoppackage", (string)null);
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Artistprofile", b =>
                {
                    b.HasOne("ArtisanHubs.Data.Entities.Account", "Account")
                        .WithOne("Artistprofile")
                        .HasForeignKey("ArtisanHubs.Data.Entities.Artistprofile", "AccountId")
                        .IsRequired()
                        .HasConstraintName("artistprofile_account_id_fkey");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Artistwallet", b =>
                {
                    b.HasOne("ArtisanHubs.Data.Entities.Artistprofile", "Artist")
                        .WithOne("Artistwallet")
                        .HasForeignKey("ArtisanHubs.Data.Entities.Artistwallet", "ArtistId")
                        .IsRequired()
                        .HasConstraintName("artistwallet_artist_id_fkey");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Artistworkshop", b =>
                {
                    b.HasOne("ArtisanHubs.Data.Entities.Artistprofile", "Artist")
                        .WithMany("Artistworkshops")
                        .HasForeignKey("ArtistId")
                        .IsRequired()
                        .HasConstraintName("artistworkshop_artist_id_fkey");

                    b.HasOne("ArtisanHubs.Data.Entities.Workshoppackage", "Package")
                        .WithMany("Artistworkshops")
                        .HasForeignKey("PackageId")
                        .IsRequired()
                        .HasConstraintName("artistworkshop_package_id_fkey");

                    b.Navigation("Artist");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Category", b =>
                {
                    b.HasOne("ArtisanHubs.Data.Entities.Category", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("category_parent_id_fkey");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Commission", b =>
                {
                    b.HasOne("ArtisanHubs.Data.Entities.Artistprofile", "Artist")
                        .WithMany("Commissions")
                        .HasForeignKey("ArtistId")
                        .IsRequired()
                        .HasConstraintName("commission_artist_id_fkey");

                    b.HasOne("ArtisanHubs.Data.Entities.Order", "Order")
                        .WithMany("Commissions")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("commission_order_id_fkey");

                    b.HasOne("ArtisanHubs.Data.Entities.Product", "Product")
                        .WithMany("Commissions")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("commission_product_id_fkey");

                    b.HasOne("ArtisanHubs.Data.Entities.Artistworkshop", "Workshop")
                        .WithMany("Commissions")
                        .HasForeignKey("WorkshopId")
                        .HasConstraintName("commission_workshop_id_fkey");

                    b.Navigation("Artist");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Feedback", b =>
                {
                    b.HasOne("ArtisanHubs.Data.Entities.Account", "Account")
                        .WithMany("Feedbacks")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("feedback_account_id_fkey");

                    b.HasOne("ArtisanHubs.Data.Entities.Product", "Product")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("feedback_product_id_fkey");

                    b.HasOne("ArtisanHubs.Data.Entities.Artistworkshop", "Workshop")
                        .WithMany("Feedbacks")
                        .HasForeignKey("WorkshopId")
                        .HasConstraintName("feedback_workshop_id_fkey");

                    b.Navigation("Account");

                    b.Navigation("Product");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Order", b =>
                {
                    b.HasOne("ArtisanHubs.Data.Entities.Account", "Account")
                        .WithMany("Orders")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("Order_account_id_fkey");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Orderdetail", b =>
                {
                    b.HasOne("ArtisanHubs.Data.Entities.Order", "Order")
                        .WithMany("Orderdetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("orderdetail_order_id_fkey");

                    b.HasOne("ArtisanHubs.Data.Entities.Product", "Product")
                        .WithMany("Orderdetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("orderdetail_product_id_fkey");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Payment", b =>
                {
                    b.HasOne("ArtisanHubs.Data.Entities.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("payment_order_id_fkey");

                    b.HasOne("ArtisanHubs.Data.Entities.Artistworkshop", "Workshop")
                        .WithMany("Payments")
                        .HasForeignKey("WorkshopId")
                        .HasConstraintName("payment_workshop_id_fkey");

                    b.Navigation("Order");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Product", b =>
                {
                    b.HasOne("ArtisanHubs.Data.Entities.Artistprofile", "Artist")
                        .WithMany("Products")
                        .HasForeignKey("ArtistId")
                        .IsRequired()
                        .HasConstraintName("product_artist_id_fkey");

                    b.HasOne("ArtisanHubs.Data.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("product_category_id_fkey");

                    b.Navigation("Artist");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Wallettransaction", b =>
                {
                    b.HasOne("ArtisanHubs.Data.Entities.Commission", "Commission")
                        .WithMany("Wallettransactions")
                        .HasForeignKey("CommissionId")
                        .HasConstraintName("wallettransaction_commission_id_fkey");

                    b.HasOne("ArtisanHubs.Data.Entities.Payment", "Payment")
                        .WithMany("Wallettransactions")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("wallettransaction_payment_id_fkey");

                    b.HasOne("ArtisanHubs.Data.Entities.Artistwallet", "Wallet")
                        .WithMany("Wallettransactions")
                        .HasForeignKey("WalletId")
                        .IsRequired()
                        .HasConstraintName("wallettransaction_wallet_id_fkey");

                    b.HasOne("ArtisanHubs.Data.Entities.Withdrawrequest", "Withdraw")
                        .WithMany("Wallettransactions")
                        .HasForeignKey("WithdrawId")
                        .HasConstraintName("wallettransaction_withdraw_id_fkey");

                    b.Navigation("Commission");

                    b.Navigation("Payment");

                    b.Navigation("Wallet");

                    b.Navigation("Withdraw");
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Withdrawrequest", b =>
                {
                    b.HasOne("ArtisanHubs.Data.Entities.Artistprofile", "Artist")
                        .WithMany("Withdrawrequests")
                        .HasForeignKey("ArtistId")
                        .IsRequired()
                        .HasConstraintName("withdrawrequest_artist_id_fkey");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Account", b =>
                {
                    b.Navigation("Artistprofile");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Artistprofile", b =>
                {
                    b.Navigation("Artistwallet");

                    b.Navigation("Artistworkshops");

                    b.Navigation("Commissions");

                    b.Navigation("Products");

                    b.Navigation("Withdrawrequests");
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Artistwallet", b =>
                {
                    b.Navigation("Wallettransactions");
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Artistworkshop", b =>
                {
                    b.Navigation("Commissions");

                    b.Navigation("Feedbacks");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Category", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Commission", b =>
                {
                    b.Navigation("Wallettransactions");
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Order", b =>
                {
                    b.Navigation("Commissions");

                    b.Navigation("Orderdetails");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Payment", b =>
                {
                    b.Navigation("Wallettransactions");
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Product", b =>
                {
                    b.Navigation("Commissions");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orderdetails");
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Withdrawrequest", b =>
                {
                    b.Navigation("Wallettransactions");
                });

            modelBuilder.Entity("ArtisanHubs.Data.Entities.Workshoppackage", b =>
                {
                    b.Navigation("Artistworkshops");
                });
#pragma warning restore 612, 618
        }
    }
}
